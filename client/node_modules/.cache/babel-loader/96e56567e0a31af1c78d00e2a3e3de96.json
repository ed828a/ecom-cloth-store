{"ast":null,"code":"import { takeLatest, put, all, call } from 'redux-saga/effects';\nimport UserActionTypes from './user.types'; // import { signInWithGoogle } from '../../firebase/firebase.utils'\n\nimport { googleProvider, auth, createUserProfileDocument, getCurrentUser } from '../../firebase/firebase.utils';\nimport { signInSuccess, signInFailure, signOutSuccess, signOutFailure, signUpFailure, signUpSuccess } from './user.action';\nexport function* getSnapshotFromUserAuth(userAuth) {\n  try {\n    // console.log('user', userAuth);\n    const userRef = yield call(createUserProfileDocument, userAuth);\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    })); // console.log('user: ', {\n    //     id: userSnapshot.id, \n    //     ...userSnapshot.data()\n    //  });\n  } catch (error) {\n    // console.error(error);\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWithGoogle() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    // console.error(error);\n    yield put(signInFailure(error));\n  }\n}\n; // what we want to do: listen to GOOGLE_SIGN_IN_START and trigger our actual sign from the saga.\n\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\n; // here input is an action object\n\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    console.log('error: ', error.message);\n    yield put(signInFailure(error));\n  }\n}\n;\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\n;\nexport function* isUserAuthenticated() {\n  // console.log('isUserAuthenticated() called');\n  try {\n    const userAuth = yield getCurrentUser(); // console.log('userAuth: ', userAuth);\n\n    if (!userAuth) return;else {\n      yield getSnapshotFromUserAuth(userAuth);\n    }\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\n;\nexport function* onCheckUserSession() {\n  // yield console.log('saga: onCheckUserSession() called');\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\n;\nexport function* signOut() {\n  try {\n    yield auth.signOut();\n    yield put(signOutSuccess());\n  } catch (error) {\n    yield put(signOutFailure());\n  }\n}\n;\nexport function* onSignOutStart() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_START, signOut);\n}\n;\nexport function* doSignUpStart({\n  email,\n  password,\n  displayName\n}) {\n  try {\n    const {\n      userAuth\n    } = yield auth.createUserWithEmailAndPassword(email, password);\n    const userRef = yield createUserProfileDocument(userAuth, {\n      displayName\n    });\n    const userSnapshot = yield userRef.get();\n    yield put(signUpSuccess());\n  } catch (error) {\n    yield put(signUpFailure(error));\n  }\n}\nexport function* onSignUpStart() {\n  yield takeLatest(UserActionTypes.SIGN_UP_START, doSignUpStart);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(onCheckUserSession), call(onSignOutStart)]);\n}\n;","map":{"version":3,"sources":["E:/LearnWebDev/CompleteReactCourse/ecom-cloth-store/src/redux/user/user.sagas.js"],"names":["takeLatest","put","all","call","UserActionTypes","googleProvider","auth","createUserProfileDocument","getCurrentUser","signInSuccess","signInFailure","signOutSuccess","signOutFailure","signUpFailure","signUpSuccess","getSnapshotFromUserAuth","userAuth","userRef","userSnapshot","get","id","data","error","signInWithGoogle","user","signInWithPopup","onGoogleSignInStart","GOOGLE_SIGN_IN_START","signInWithEmail","payload","email","password","signInWithEmailAndPassword","console","log","message","onEmailSignInStart","EMAIL_SIGN_IN_START","isUserAuthenticated","onCheckUserSession","CHECK_USER_SESSION","signOut","onSignOutStart","SIGN_OUT_START","doSignUpStart","displayName","createUserWithEmailAndPassword","onSignUpStart","SIGN_UP_START","userSagas"],"mappings":"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","sourcesContent":["import { takeLatest, put, all, call } from 'redux-saga/effects';\r\n\r\nimport UserActionTypes from './user.types';\r\n// import { signInWithGoogle } from '../../firebase/firebase.utils'\r\nimport {\r\n    googleProvider,\r\n    auth,\r\n    createUserProfileDocument,\r\n    getCurrentUser\r\n} from '../../firebase/firebase.utils'\r\n\r\nimport {\r\n    signInSuccess,\r\n    signInFailure,\r\n    signOutSuccess,\r\n    signOutFailure,\r\n    signUpFailure,\r\n    signUpSuccess\r\n} from './user.action';\r\n\r\nexport function* getSnapshotFromUserAuth(userAuth) {\r\n    try {\r\n        // console.log('user', userAuth);\r\n        const userRef = yield call(createUserProfileDocument, userAuth);\r\n        const userSnapshot = yield userRef.get();\r\n        yield put(signInSuccess({\r\n            id: userSnapshot.id,\r\n            ...userSnapshot.data()\r\n        }));\r\n\r\n        // console.log('user: ', {\r\n        //     id: userSnapshot.id, \r\n        //     ...userSnapshot.data()\r\n        //  });\r\n\r\n    } catch (error) {\r\n        // console.error(error);\r\n        yield put(signInFailure(error));\r\n    }\r\n}\r\n\r\nexport function* signInWithGoogle() {\r\n    try {\r\n        const { user } = yield auth.signInWithPopup(googleProvider);\r\n        yield getSnapshotFromUserAuth(user);\r\n    } catch (error) {\r\n        // console.error(error);\r\n        yield put(signInFailure(error));\r\n    }\r\n};\r\n\r\n// what we want to do: listen to GOOGLE_SIGN_IN_START and trigger our actual sign from the saga.\r\nexport function* onGoogleSignInStart() {\r\n    yield takeLatest(\r\n        UserActionTypes.GOOGLE_SIGN_IN_START,\r\n        signInWithGoogle\r\n    );\r\n};\r\n\r\n// here input is an action object\r\nexport function* signInWithEmail({ payload: { email, password } }) {\r\n    try {\r\n        const { user } = yield auth.signInWithEmailAndPassword(email, password);\r\n        yield getSnapshotFromUserAuth(user);\r\n    } catch (error) {\r\n        console.log('error: ', error.message);\r\n        yield put(signInFailure(error));\r\n    }\r\n};\r\n\r\nexport function* onEmailSignInStart() {\r\n    yield takeLatest(\r\n        UserActionTypes.EMAIL_SIGN_IN_START,\r\n        signInWithEmail\r\n    )\r\n};\r\n\r\n\r\nexport function* isUserAuthenticated() {\r\n    // console.log('isUserAuthenticated() called');\r\n    try {\r\n        const userAuth = yield getCurrentUser();\r\n        // console.log('userAuth: ', userAuth);\r\n        if(!userAuth) return; \r\n        else { yield getSnapshotFromUserAuth(userAuth); }\r\n\r\n    } catch (error) {\r\n        yield put(signInFailure(error));\r\n    }\r\n};\r\n\r\nexport function* onCheckUserSession() {\r\n    // yield console.log('saga: onCheckUserSession() called');\r\n    yield takeLatest(\r\n        UserActionTypes.CHECK_USER_SESSION,\r\n        isUserAuthenticated\r\n    )\r\n};\r\n\r\nexport function* signOut(){\r\n    try {\r\n        yield auth.signOut();\r\n        yield put(signOutSuccess());\r\n    } catch (error) {\r\n        yield put(signOutFailure());\r\n    }\r\n};\r\n\r\nexport function* onSignOutStart() {\r\n    yield takeLatest(\r\n        UserActionTypes.SIGN_OUT_START,\r\n        signOut \r\n    )\r\n};\r\n\r\nexport function* doSignUpStart({ email, password, displayName }){\r\n    try {\r\n        const { userAuth } = yield auth.createUserWithEmailAndPassword( email, password );\r\n        const userRef = yield createUserProfileDocument(userAuth, { displayName });\r\n        const userSnapshot = yield userRef.get();\r\n        yield put(signUpSuccess())\r\n    } catch (error) {\r\n        yield put(signUpFailure(error));\r\n    }\r\n}\r\n\r\nexport function* onSignUpStart(){\r\n    yield takeLatest(\r\n        UserActionTypes.SIGN_UP_START,\r\n        doSignUpStart\r\n    )\r\n}\r\n\r\n\r\n\r\nexport function* userSagas() {\r\n    yield all([\r\n        call(onGoogleSignInStart),\r\n        call(onEmailSignInStart),\r\n        call(onCheckUserSession),\r\n        call(onSignOutStart)\r\n    ]);\r\n};\r\n\r\n"]},"metadata":{},"sourceType":"module"}