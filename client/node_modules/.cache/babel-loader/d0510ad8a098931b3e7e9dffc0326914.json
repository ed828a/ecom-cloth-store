{"ast":null,"code":"import { takeLatest, put, all, call } from 'redux-saga/effects';\nimport UserActionTypes from './user.types'; // import { signInWithGoogle } from '../../firebase/firebase.utils'\n\nimport { googleProvider, auth, createUserProfileDocument } from '../../firebase/firebase.utils';\nimport { googleSignInStart, googleSignInSuccess, googleSignInfailure, emailSignInStart, emailSignInSuccess, emailSignInfailure } from './user.action';\nexport function* signInWithGoogle() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider); // console.log('user', user);\n\n    const userRef = yield call(createUserProfileDocument, user);\n    const userSnapshot = yield userRef.get(); // console.log('user: ', {\n    //     id: userSnapshot.id, \n    //     ...userSnapshot.data()\n    //  });\n\n    yield put(googleSignInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    console.error(error);\n    yield put(googleSignInfailure(error));\n  }\n}\n; // what we want to do: listen to GOOGLE_SIGN_IN_START and trigger our actual sign from the saga.\n\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\n;\nexport function* signInWithEmail({\n  email,\n  password\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    const userRef = yield call(createUserProfileDocument, user);\n    const userSnapshot = yield userRef.get();\n    console.log('user: ', {\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    });\n    yield put(emailSignInSuccess({\n      id: userSnapshot.id,\n      ...user.data()\n    }));\n  } catch (error) {\n    console.log(error);\n    yield put(emailSignInfailure(error));\n  }\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart, onEmailSignInStart)]);\n}\n;","map":{"version":3,"sources":["E:/LearnWebDev/CompleteReactCourse/ecom-cloth-store/src/redux/user/user.sagas.js"],"names":["takeLatest","put","all","call","UserActionTypes","googleProvider","auth","createUserProfileDocument","googleSignInStart","googleSignInSuccess","googleSignInfailure","emailSignInStart","emailSignInSuccess","emailSignInfailure","signInWithGoogle","user","signInWithPopup","userRef","userSnapshot","get","id","data","error","console","onGoogleSignInStart","GOOGLE_SIGN_IN_START","signInWithEmail","email","password","signInWithEmailAndPassword","log","onEmailSignInStart","EMAIL_SIGN_IN_START","userSagas"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,GAArB,EAA0BC,GAA1B,EAA+BC,IAA/B,QAA2C,oBAA3C;AAEA,OAAOC,eAAP,MAA4B,cAA5B,C,CACA;;AACA,SAASC,cAAT,EAAyBC,IAAzB,EAA+BC,yBAA/B,QAAgE,+BAAhE;AAEA,SACIC,iBADJ,EAEIC,mBAFJ,EAGIC,mBAHJ,EAIIC,gBAJJ,EAKIC,kBALJ,EAMIC,kBANJ,QAOO,eAPP;AASA,OAAO,UAAUC,gBAAV,GAA6B;AAChC,MAAI;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMT,IAAI,CAACU,eAAL,CAAqBX,cAArB,CAAvB,CADA,CAEA;;AACA,UAAMY,OAAO,GAAG,MAAMd,IAAI,CAACI,yBAAD,EAA4BQ,IAA5B,CAA1B;AACA,UAAMG,YAAY,GAAG,MAAMD,OAAO,CAACE,GAAR,EAA3B,CAJA,CAKA;AACA;AACA;AACA;;AACA,UAAMlB,GAAG,CAACQ,mBAAmB,CAAC;AAC1BW,MAAAA,EAAE,EAAEF,YAAY,CAACE,EADS;AAE1B,SAAGF,YAAY,CAACG,IAAb;AAFuB,KAAD,CAApB,CAAT;AAKH,GAdD,CAcE,OAAOC,KAAP,EAAc;AACZC,IAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACA,UAAMrB,GAAG,CAACS,mBAAmB,CAACY,KAAD,CAApB,CAAT;AACH;AACJ;AAAA,C,CAED;;AACA,OAAO,UAAUE,mBAAV,GAAgC;AACnC,QAAMxB,UAAU,CACZI,eAAe,CAACqB,oBADJ,EAEZX,gBAFY,CAAhB;AAIH;AAAA;AAED,OAAO,UAAUY,eAAV,CAA0B;AAAEC,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAA1B,EAA+C;AAClD,MAAI;AACA,UAAM;AAAEb,MAAAA;AAAF,QAAW,MAAMT,IAAI,CAACuB,0BAAL,CAAgCF,KAAhC,EAAuCC,QAAvC,CAAvB;AACA,UAAMX,OAAO,GAAG,MAAMd,IAAI,CAACI,yBAAD,EAA4BQ,IAA5B,CAA1B;AACA,UAAMG,YAAY,GAAG,MAAMD,OAAO,CAACE,GAAR,EAA3B;AACAI,IAAAA,OAAO,CAACO,GAAR,CAAY,QAAZ,EAAsB;AAClBV,MAAAA,EAAE,EAAEF,YAAY,CAACE,EADC;AAElB,SAAGF,YAAY,CAACG,IAAb;AAFe,KAAtB;AAKA,UAAMpB,GAAG,CAACW,kBAAkB,CAAC;AACzBQ,MAAAA,EAAE,EAAEF,YAAY,CAACE,EADQ;AAEzB,SAAGL,IAAI,CAACM,IAAL;AAFsB,KAAD,CAAnB,CAAT;AAKH,GAdD,CAcE,OAAOC,KAAP,EAAc;AACZC,IAAAA,OAAO,CAACO,GAAR,CAAYR,KAAZ;AACA,UAAMrB,GAAG,CAACY,kBAAkB,CAACS,KAAD,CAAnB,CAAT;AACH;AAGJ;AAED,OAAO,UAAUS,kBAAV,GAA+B;AAClC,QAAM/B,UAAU,CACZI,eAAe,CAAC4B,mBADJ,EAEZN,eAFY,CAAhB;AAIH;AAED,OAAO,UAAUO,SAAV,GAAsB;AACzB,QAAM/B,GAAG,CAAC,CACNC,IAAI,CAACqB,mBAAD,EAAsBO,kBAAtB,CADE,CAAD,CAAT;AAGH;AAAA","sourcesContent":["import { takeLatest, put, all, call } from 'redux-saga/effects';\r\n\r\nimport UserActionTypes from './user.types';\r\n// import { signInWithGoogle } from '../../firebase/firebase.utils'\r\nimport { googleProvider, auth, createUserProfileDocument } from '../../firebase/firebase.utils'\r\n\r\nimport {\r\n    googleSignInStart,\r\n    googleSignInSuccess,\r\n    googleSignInfailure,\r\n    emailSignInStart,\r\n    emailSignInSuccess,\r\n    emailSignInfailure\r\n} from './user.action';\r\n\r\nexport function* signInWithGoogle() {\r\n    try {\r\n        const { user } = yield auth.signInWithPopup(googleProvider);\r\n        // console.log('user', user);\r\n        const userRef = yield call(createUserProfileDocument, user);\r\n        const userSnapshot = yield userRef.get();\r\n        // console.log('user: ', {\r\n        //     id: userSnapshot.id, \r\n        //     ...userSnapshot.data()\r\n        //  });\r\n        yield put(googleSignInSuccess({\r\n            id: userSnapshot.id,\r\n            ...userSnapshot.data()\r\n        }));\r\n\r\n    } catch (error) {\r\n        console.error(error);\r\n        yield put(googleSignInfailure(error));\r\n    }\r\n};\r\n\r\n// what we want to do: listen to GOOGLE_SIGN_IN_START and trigger our actual sign from the saga.\r\nexport function* onGoogleSignInStart() {\r\n    yield takeLatest(\r\n        UserActionTypes.GOOGLE_SIGN_IN_START,\r\n        signInWithGoogle\r\n    );\r\n};\r\n\r\nexport function* signInWithEmail({ email, password }) {\r\n    try {\r\n        const { user } = yield auth.signInWithEmailAndPassword(email, password);\r\n        const userRef = yield call(createUserProfileDocument, user);\r\n        const userSnapshot = yield userRef.get();\r\n        console.log('user: ', {\r\n            id: userSnapshot.id,\r\n            ...userSnapshot.data()\r\n        });\r\n\r\n        yield put(emailSignInSuccess({\r\n            id: userSnapshot.id,\r\n            ...user.data()\r\n        }));\r\n\r\n    } catch (error) {\r\n        console.log(error);\r\n        yield put(emailSignInfailure(error));\r\n    }\r\n\r\n\r\n}\r\n\r\nexport function* onEmailSignInStart() {\r\n    yield takeLatest(\r\n        UserActionTypes.EMAIL_SIGN_IN_START,\r\n        signInWithEmail\r\n    )\r\n}\r\n\r\nexport function* userSagas() {\r\n    yield all([\r\n        call(onGoogleSignInStart, onEmailSignInStart)\r\n    ]);\r\n};"]},"metadata":{},"sourceType":"module"}