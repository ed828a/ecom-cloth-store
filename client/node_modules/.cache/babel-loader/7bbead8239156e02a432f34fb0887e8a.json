{"ast":null,"code":"import { takeLatest, put, all, call } from 'redux-saga/effects';\nimport UserActionTypes from './user.types'; // import { signInWithGoogle } from '../../firebase/firebase.utils'\n\nimport { googleProvider, auth, createUserProfileDocument } from '../../firebase/firebase.utils';\nimport { googleSignInSuccess, googleSignInfailure, emailSignInSuccess, emailSignInfailure } from './user.action';\nexport function* signInWithGoogle() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider); // console.log('user', user);\n\n    const userRef = yield call(createUserProfileDocument, user);\n    const userSnapshot = yield userRef.get(); // console.log('user: ', {\n    //     id: userSnapshot.id, \n    //     ...userSnapshot.data()\n    //  });\n\n    yield put(googleSignInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    console.error(error);\n    yield put(googleSignInfailure(error));\n  }\n}\n; // what we want to do: listen to GOOGLE_SIGN_IN_START and trigger our actual sign from the saga.\n\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\n; // here input is an action object\n\nexport function* signInWithEmail(input) {\n  console.log('input: ', input);\n  const {\n    payload: {\n      email,\n      password\n    }\n  } = input;\n  console.log('email: ', email);\n  console.log('password: ', password);\n\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    const userRef = yield call(createUserProfileDocument, user);\n    const userSnapshot = yield userRef.get();\n    console.log('user: ', {\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    });\n    yield put(emailSignInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    console.log('error: ', error.message);\n    yield put(emailSignInfailure(error));\n  }\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart)]);\n}\n;","map":{"version":3,"sources":["E:/LearnWebDev/CompleteReactCourse/ecom-cloth-store/src/redux/user/user.sagas.js"],"names":["takeLatest","put","all","call","UserActionTypes","googleProvider","auth","createUserProfileDocument","googleSignInSuccess","googleSignInfailure","emailSignInSuccess","emailSignInfailure","signInWithGoogle","user","signInWithPopup","userRef","userSnapshot","get","id","data","error","console","onGoogleSignInStart","GOOGLE_SIGN_IN_START","signInWithEmail","input","log","payload","email","password","signInWithEmailAndPassword","message","onEmailSignInStart","EMAIL_SIGN_IN_START","userSagas"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,GAArB,EAA0BC,GAA1B,EAA+BC,IAA/B,QAA2C,oBAA3C;AAEA,OAAOC,eAAP,MAA4B,cAA5B,C,CACA;;AACA,SAASC,cAAT,EAAyBC,IAAzB,EAA+BC,yBAA/B,QAAgE,+BAAhE;AAEA,SACIC,mBADJ,EAEIC,mBAFJ,EAGIC,kBAHJ,EAIIC,kBAJJ,QAKO,eALP;AAOA,OAAO,UAAUC,gBAAV,GAA6B;AAChC,MAAI;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMP,IAAI,CAACQ,eAAL,CAAqBT,cAArB,CAAvB,CADA,CAEA;;AACA,UAAMU,OAAO,GAAG,MAAMZ,IAAI,CAACI,yBAAD,EAA4BM,IAA5B,CAA1B;AACA,UAAMG,YAAY,GAAG,MAAMD,OAAO,CAACE,GAAR,EAA3B,CAJA,CAKA;AACA;AACA;AACA;;AACA,UAAMhB,GAAG,CAACO,mBAAmB,CAAC;AAC1BU,MAAAA,EAAE,EAAEF,YAAY,CAACE,EADS;AAE1B,SAAGF,YAAY,CAACG,IAAb;AAFuB,KAAD,CAApB,CAAT;AAKH,GAdD,CAcE,OAAOC,KAAP,EAAc;AACZC,IAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACA,UAAMnB,GAAG,CAACQ,mBAAmB,CAACW,KAAD,CAApB,CAAT;AACH;AACJ;AAAA,C,CAED;;AACA,OAAO,UAAUE,mBAAV,GAAgC;AACnC,QAAMtB,UAAU,CACZI,eAAe,CAACmB,oBADJ,EAEZX,gBAFY,CAAhB;AAIH;AAAA,C,CAED;;AACA,OAAO,UAAUY,eAAV,CAA0BC,KAA1B,EAAiC;AACpCJ,EAAAA,OAAO,CAACK,GAAR,CAAY,SAAZ,EAAuBD,KAAvB;AACA,QAAM;AAACE,IAAAA,OAAO,EAAE;AAACC,MAAAA,KAAD;AAAQC,MAAAA;AAAR;AAAV,MAA+BJ,KAArC;AACAJ,EAAAA,OAAO,CAACK,GAAR,CAAY,SAAZ,EAAuBE,KAAvB;AACAP,EAAAA,OAAO,CAACK,GAAR,CAAY,YAAZ,EAA0BG,QAA1B;;AAEA,MAAI;AACA,UAAM;AAAEhB,MAAAA;AAAF,QAAW,MAAMP,IAAI,CAACwB,0BAAL,CAAgCF,KAAhC,EAAuCC,QAAvC,CAAvB;AACA,UAAMd,OAAO,GAAG,MAAMZ,IAAI,CAACI,yBAAD,EAA4BM,IAA5B,CAA1B;AACA,UAAMG,YAAY,GAAG,MAAMD,OAAO,CAACE,GAAR,EAA3B;AACAI,IAAAA,OAAO,CAACK,GAAR,CAAY,QAAZ,EAAsB;AAClBR,MAAAA,EAAE,EAAEF,YAAY,CAACE,EADC;AAElB,SAAGF,YAAY,CAACG,IAAb;AAFe,KAAtB;AAKA,UAAMlB,GAAG,CAACS,kBAAkB,CAAC;AACzBQ,MAAAA,EAAE,EAAEF,YAAY,CAACE,EADQ;AAEzB,SAAGF,YAAY,CAACG,IAAb;AAFsB,KAAD,CAAnB,CAAT;AAKH,GAdD,CAcE,OAAOC,KAAP,EAAc;AACZC,IAAAA,OAAO,CAACK,GAAR,CAAY,SAAZ,EAAuBN,KAAK,CAACW,OAA7B;AACA,UAAM9B,GAAG,CAACU,kBAAkB,CAACS,KAAD,CAAnB,CAAT;AACH;AAGJ;AAED,OAAO,UAAUY,kBAAV,GAA+B;AAClC,QAAMhC,UAAU,CACZI,eAAe,CAAC6B,mBADJ,EAEZT,eAFY,CAAhB;AAIH;AAED,OAAO,UAAUU,SAAV,GAAsB;AACzB,QAAMhC,GAAG,CAAC,CACNC,IAAI,CAACmB,mBAAD,CADE,EAENnB,IAAI,CAAC6B,kBAAD,CAFE,CAAD,CAAT;AAIH;AAAA","sourcesContent":["import { takeLatest, put, all, call } from 'redux-saga/effects';\r\n\r\nimport UserActionTypes from './user.types';\r\n// import { signInWithGoogle } from '../../firebase/firebase.utils'\r\nimport { googleProvider, auth, createUserProfileDocument } from '../../firebase/firebase.utils'\r\n\r\nimport {\r\n    googleSignInSuccess,\r\n    googleSignInfailure,\r\n    emailSignInSuccess,\r\n    emailSignInfailure\r\n} from './user.action';\r\n\r\nexport function* signInWithGoogle() {\r\n    try {\r\n        const { user } = yield auth.signInWithPopup(googleProvider);\r\n        // console.log('user', user);\r\n        const userRef = yield call(createUserProfileDocument, user);\r\n        const userSnapshot = yield userRef.get();\r\n        // console.log('user: ', {\r\n        //     id: userSnapshot.id, \r\n        //     ...userSnapshot.data()\r\n        //  });\r\n        yield put(googleSignInSuccess({\r\n            id: userSnapshot.id,\r\n            ...userSnapshot.data()\r\n        }));\r\n\r\n    } catch (error) {\r\n        console.error(error);\r\n        yield put(googleSignInfailure(error));\r\n    }\r\n};\r\n\r\n// what we want to do: listen to GOOGLE_SIGN_IN_START and trigger our actual sign from the saga.\r\nexport function* onGoogleSignInStart() {\r\n    yield takeLatest(\r\n        UserActionTypes.GOOGLE_SIGN_IN_START,\r\n        signInWithGoogle\r\n    );\r\n};\r\n\r\n// here input is an action object\r\nexport function* signInWithEmail(input) {\r\n    console.log('input: ', input);\r\n    const {payload: {email, password}} = input;\r\n    console.log('email: ', email);\r\n    console.log('password: ', password);\r\n\r\n    try {\r\n        const { user } = yield auth.signInWithEmailAndPassword(email, password);\r\n        const userRef = yield call(createUserProfileDocument, user);\r\n        const userSnapshot = yield userRef.get();\r\n        console.log('user: ', {\r\n            id: userSnapshot.id,\r\n            ...userSnapshot.data()\r\n        });\r\n\r\n        yield put(emailSignInSuccess({\r\n            id: userSnapshot.id,\r\n            ...userSnapshot.data()\r\n        }));\r\n\r\n    } catch (error) {\r\n        console.log('error: ', error.message);\r\n        yield put(emailSignInfailure(error));\r\n    }\r\n\r\n\r\n}\r\n\r\nexport function* onEmailSignInStart() {\r\n    yield takeLatest(\r\n        UserActionTypes.EMAIL_SIGN_IN_START,\r\n        signInWithEmail   \r\n    )\r\n}\r\n\r\nexport function* userSagas() {\r\n    yield all([\r\n        call(onGoogleSignInStart),\r\n        call(onEmailSignInStart)\r\n    ]);\r\n};"]},"metadata":{},"sourceType":"module"}