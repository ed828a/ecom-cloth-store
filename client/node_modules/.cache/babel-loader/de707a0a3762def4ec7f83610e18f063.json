{"ast":null,"code":"var _jsxFileName = \"E:\\\\LearnWebDev\\\\CompleteReactCourse\\\\ecom-cloth-store\\\\src\\\\pages\\\\shoppage\\\\shop.component.jsx\";\nimport React, { Component } from \"react\";\nimport CollectionsOverview from \"../../component/collections-overview/collections-overview.component\";\nimport { Route } from \"react-router-dom\";\nimport CollectionPage from \"../collectionpage/collection-page.component\";\nimport ErrorPage from \"../errorpage/ErrorPage\";\nimport { firestore, convertCollectionsSnapshotToMap } from \"../../firebase/firebase.utils\";\nimport { connect } from \"react-redux\";\nimport { updateCollections } from \"../../redux/shop/shop.actions\";\nimport WithSpinner from \"../../component/with-spinner/with-spinner.component\";\nconst CollectionsOverviewWithSpinner = WithSpinner(CollectionsOverview);\nconst CollectionPageWithSpinner = WithSpinner(CollectionPage);\nexport class ShopPage extends Component {\n  constructor(props) {\n    super(props);\n    this.unsubscribeFromSnapshot = null;\n    this.state = {\n      loading: true\n    };\n  }\n\n  componentDidMount() {\n    const {\n      updateCollections\n    } = this.props;\n    const collectionsRef = firestore.collection(\"collections\");\n    this.unsubscribeFromSnapshot = collectionsRef.onSnapshot(async snapshot => {\n      // console.log('snapshot: ', snapshot);\n      const collectionsMap = convertCollectionsSnapshotToMap(snapshot); // console.log('collectionsMap: ', collectionsMap);\n\n      updateCollections(collectionsMap);\n      this.setState({\n        loading: false\n      });\n    });\n  }\n\n  componentWillUnmount() {\n    this.unsubscribeFromSnapshot();\n  }\n\n  render() {\n    const {\n      match\n    } = this.props;\n    const {\n      loading\n    } = this.state;\n    return React.createElement(\"div\", {\n      className: \"shop-page\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, React.createElement(Route, {\n      exact: true,\n      path: `${match.path}` // component={CollectionsOverview}\n      ,\n      render: props => React.createElement(CollectionsOverviewWithSpinner, Object.assign({\n        isLoading: loading\n      }, props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: `${match.path}/:collectionId` // component={CollectionPage}\n      ,\n      render: props => React.createElement(CollectionPageWithSpinner, Object.assign({\n        isLoading: loading\n      }, props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: `${match.path}/:collectionId/*`,\n      component: ErrorPage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }));\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => ({\n  updateCollections: collections => dispatch(updateCollections(collections))\n});\n\nexport default connect(null, mapDispatchToProps)(ShopPage);","map":{"version":3,"sources":["E:/LearnWebDev/CompleteReactCourse/ecom-cloth-store/src/pages/shoppage/shop.component.jsx"],"names":["React","Component","CollectionsOverview","Route","CollectionPage","ErrorPage","firestore","convertCollectionsSnapshotToMap","connect","updateCollections","WithSpinner","CollectionsOverviewWithSpinner","CollectionPageWithSpinner","ShopPage","constructor","props","unsubscribeFromSnapshot","state","loading","componentDidMount","collectionsRef","collection","onSnapshot","snapshot","collectionsMap","setState","componentWillUnmount","render","match","path","mapDispatchToProps","dispatch","collections"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,mBAAP,MAAgC,qEAAhC;AACA,SAASC,KAAT,QAAsB,kBAAtB;AACA,OAAOC,cAAP,MAA2B,6CAA3B;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,SACIC,SADJ,EAEIC,+BAFJ,QAGO,+BAHP;AAIA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,iBAAT,QAAkC,+BAAlC;AACA,OAAOC,WAAP,MAAwB,qDAAxB;AAEA,MAAMC,8BAA8B,GAAGD,WAAW,CAACR,mBAAD,CAAlD;AACA,MAAMU,yBAAyB,GAAGF,WAAW,CAACN,cAAD,CAA7C;AAEA,OAAO,MAAMS,QAAN,SAAuBZ,SAAvB,CAAiC;AACpCa,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AADe,SAQnBC,uBARmB,GAQO,IARP;AAGf,SAAKC,KAAL,GAAa;AACRC,MAAAA,OAAO,EAAE;AADD,KAAb;AAGH;;AAIDC,EAAAA,iBAAiB,GAAG;AAChB,UAAM;AAAEV,MAAAA;AAAF,QAAwB,KAAKM,KAAnC;AACA,UAAMK,cAAc,GAAGd,SAAS,CAACe,UAAV,CAAqB,aAArB,CAAvB;AAEA,SAAKL,uBAAL,GAA+BI,cAAc,CAACE,UAAf,CAC3B,MAAMC,QAAN,IAAkB;AACd;AACA,YAAMC,cAAc,GAAGjB,+BAA+B,CAClDgB,QADkD,CAAtD,CAFc,CAKd;;AACAd,MAAAA,iBAAiB,CAACe,cAAD,CAAjB;AACA,WAAKC,QAAL,CAAc;AAAEP,QAAAA,OAAO,EAAE;AAAX,OAAd;AACH,KAT0B,CAA/B;AAWH;;AAEDQ,EAAAA,oBAAoB,GAAG;AACnB,SAAKV,uBAAL;AACH;;AAEDW,EAAAA,MAAM,GAAG;AACL,UAAM;AAAEC,MAAAA;AAAF,QAAY,KAAKb,KAAvB;AACA,UAAM;AAAEG,MAAAA;AAAF,QAAc,KAAKD,KAAzB;AACA,WACI;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,KAAD;AACI,MAAA,KAAK,MADT;AAEI,MAAA,IAAI,EAAG,GAAEW,KAAK,CAACC,IAAK,EAFxB,CAGI;AAHJ;AAII,MAAA,MAAM,EAAGd,KAAD,IAAW,oBAAC,8BAAD;AAAgC,QAAA,SAAS,EAAEG;AAA3C,SAAwDH,KAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAJvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAQI,oBAAC,KAAD;AACI,MAAA,KAAK,MADT;AAEI,MAAA,IAAI,EAAG,GAAEa,KAAK,CAACC,IAAK,gBAFxB,CAGI;AAHJ;AAII,MAAA,MAAM,EAAEd,KAAK,IAAI,oBAAC,yBAAD;AAA2B,QAAA,SAAS,EAAEG;AAAtC,SAAmDH,KAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAJrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MARJ,EAcI,oBAAC,KAAD;AACI,MAAA,IAAI,EAAG,GAAEa,KAAK,CAACC,IAAK,kBADxB;AAEI,MAAA,SAAS,EAAExB,SAFf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAdJ,CADJ;AAqBH;;AAxDmC;;AA2DxC,MAAMyB,kBAAkB,GAAGC,QAAQ,KAAK;AACpCtB,EAAAA,iBAAiB,EAAEuB,WAAW,IAAID,QAAQ,CAACtB,iBAAiB,CAACuB,WAAD,CAAlB;AADN,CAAL,CAAnC;;AAIA,eAAexB,OAAO,CAAC,IAAD,EAAOsB,kBAAP,CAAP,CAAkCjB,QAAlC,CAAf","sourcesContent":["import React, { Component } from \"react\";\r\nimport CollectionsOverview from \"../../component/collections-overview/collections-overview.component\";\r\nimport { Route } from \"react-router-dom\";\r\nimport CollectionPage from \"../collectionpage/collection-page.component\";\r\nimport ErrorPage from \"../errorpage/ErrorPage\";\r\nimport {\r\n    firestore,\r\n    convertCollectionsSnapshotToMap\r\n} from \"../../firebase/firebase.utils\";\r\nimport { connect } from \"react-redux\";\r\nimport { updateCollections } from \"../../redux/shop/shop.actions\";\r\nimport WithSpinner from \"../../component/with-spinner/with-spinner.component\";\r\n\r\nconst CollectionsOverviewWithSpinner = WithSpinner(CollectionsOverview);\r\nconst CollectionPageWithSpinner = WithSpinner(CollectionPage);\r\n\r\nexport class ShopPage extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n    \r\n        this.state = {\r\n             loading: true\r\n        }\r\n    }\r\n    \r\n    unsubscribeFromSnapshot = null;\r\n\r\n    componentDidMount() {\r\n        const { updateCollections } = this.props;\r\n        const collectionsRef = firestore.collection(\"collections\");\r\n\r\n        this.unsubscribeFromSnapshot = collectionsRef.onSnapshot(\r\n            async snapshot => {\r\n                // console.log('snapshot: ', snapshot);\r\n                const collectionsMap = convertCollectionsSnapshotToMap(\r\n                    snapshot\r\n                );\r\n                // console.log('collectionsMap: ', collectionsMap);\r\n                updateCollections(collectionsMap);\r\n                this.setState({ loading: false });\r\n            }\r\n        );\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.unsubscribeFromSnapshot();\r\n    }\r\n\r\n    render() {\r\n        const { match } = this.props;\r\n        const { loading } = this.state;\r\n        return (\r\n            <div className=\"shop-page\">\r\n                <Route\r\n                    exact\r\n                    path={`${match.path}`}\r\n                    // component={CollectionsOverview}\r\n                    render={(props) => <CollectionsOverviewWithSpinner isLoading={loading} {...props} /> }\r\n                    \r\n                />\r\n                <Route\r\n                    exact\r\n                    path={`${match.path}/:collectionId`}\r\n                    // component={CollectionPage}\r\n                    render={props => <CollectionPageWithSpinner isLoading={loading} {...props} />}\r\n                />\r\n                <Route\r\n                    path={`${match.path}/:collectionId/*`}\r\n                    component={ErrorPage}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    updateCollections: collections => dispatch(updateCollections(collections))\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(ShopPage);\r\n"]},"metadata":{},"sourceType":"module"}