{"ast":null,"code":"import ShopActionTypes from './shop.types';\nimport { firestore, convertCollectionsSnapshotToMap } from \"../../firebase/firebase.utils\";\nexport const fetchCollectionsStart = () => ({\n  type: ShopActionTypes.FETCH_COLLECTIONS_START\n});\nexport const fetchCollectionsSuccess = collections => ({\n  type: ShopActionTypes.FETCH_COLLECTIONS_SUCCESS,\n  payload: collections\n});\nexport const fetchCollectionsFailure = errorMessage => ({\n  type: ShopActionTypes.FETCH_COLLECTIONS_FAILURE,\n  payload: errorMessage\n}); // so now, anything related to this asynchronous code is handled by redux inside of a reusable action here.\n\nexport const fetchCollectionsStartAsync = () => {\n  return dispatch => {\n    const collectionsRef = firestore.collection(\"collections\");\n    dispatch(fetchCollectionsStart); // switch isFetching value\n\n    collectionsRef.get().then(snapshot => {\n      // console.log('snapshot: ', snapshot);\n      const collectionsMap = convertCollectionsSnapshotToMap(snapshot); // console.log('collectionsMap: ', collectionsMap);\n\n      dispatch(fetchCollectionsSuccess(collectionsMap)); // toggle isFetching again\n    }).catch(error => {\n      dispatch(fetchCollectionsFailure(error.message));\n    });\n  };\n};","map":{"version":3,"sources":["E:/LearnWebDev/CompleteReactCourse/ecom-cloth-store/src/redux/shop/shop.actions.js"],"names":["ShopActionTypes","firestore","convertCollectionsSnapshotToMap","fetchCollectionsStart","type","FETCH_COLLECTIONS_START","fetchCollectionsSuccess","collections","FETCH_COLLECTIONS_SUCCESS","payload","fetchCollectionsFailure","errorMessage","FETCH_COLLECTIONS_FAILURE","fetchCollectionsStartAsync","dispatch","collectionsRef","collection","get","then","snapshot","collectionsMap","catch","error","message"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,cAA5B;AAEA,SACIC,SADJ,EAEIC,+BAFJ,QAGO,+BAHP;AAKA,OAAO,MAAMC,qBAAqB,GAAG,OAAO;AACxCC,EAAAA,IAAI,EAAEJ,eAAe,CAACK;AADkB,CAAP,CAA9B;AAIP,OAAO,MAAMC,uBAAuB,GAAIC,WAAD,KAAkB;AACrDH,EAAAA,IAAI,EAAEJ,eAAe,CAACQ,yBAD+B;AAErDC,EAAAA,OAAO,EAAEF;AAF4C,CAAlB,CAAhC;AAKP,OAAO,MAAMG,uBAAuB,GAAIC,YAAD,KAAmB;AACtDP,EAAAA,IAAI,EAAEJ,eAAe,CAACY,yBADgC;AAEtDH,EAAAA,OAAO,EAAEE;AAF6C,CAAnB,CAAhC,C,CAKP;;AACA,OAAO,MAAME,0BAA0B,GAAG,MAAM;AAC5C,SAAOC,QAAQ,IAAI;AAEf,UAAMC,cAAc,GAAGd,SAAS,CAACe,UAAV,CAAqB,aAArB,CAAvB;AACAF,IAAAA,QAAQ,CAACX,qBAAD,CAAR,CAHe,CAGkB;;AAEjCY,IAAAA,cAAc,CAACE,GAAf,GACKC,IADL,CACUC,QAAQ,IAAI;AACd;AACA,YAAMC,cAAc,GAAGlB,+BAA+B,CAACiB,QAAD,CAAtD,CAFc,CAGd;;AACAL,MAAAA,QAAQ,CAACR,uBAAuB,CAACc,cAAD,CAAxB,CAAR,CAJc,CAIqC;AACtD,KANL,EAOKC,KAPL,CAOWC,KAAK,IAAI;AACZR,MAAAA,QAAQ,CAACJ,uBAAuB,CAACY,KAAK,CAACC,OAAP,CAAxB,CAAR;AACH,KATL;AAUH,GAfD;AAgBH,CAjBM","sourcesContent":["import ShopActionTypes from './shop.types';\r\n\r\nimport {\r\n    firestore,\r\n    convertCollectionsSnapshotToMap\r\n} from \"../../firebase/firebase.utils\";\r\n\r\nexport const fetchCollectionsStart = () => ({\r\n    type: ShopActionTypes.FETCH_COLLECTIONS_START\r\n});\r\n\r\nexport const fetchCollectionsSuccess = (collections) => ({\r\n    type: ShopActionTypes.FETCH_COLLECTIONS_SUCCESS,\r\n    payload: collections\r\n});\r\n\r\nexport const fetchCollectionsFailure = (errorMessage) => ({\r\n    type: ShopActionTypes.FETCH_COLLECTIONS_FAILURE,\r\n    payload: errorMessage\r\n});\r\n\r\n// so now, anything related to this asynchronous code is handled by redux inside of a reusable action here.\r\nexport const fetchCollectionsStartAsync = () => {\r\n    return dispatch => {\r\n\r\n        const collectionsRef = firestore.collection(\"collections\");\r\n        dispatch(fetchCollectionsStart); // switch isFetching value\r\n\r\n        collectionsRef.get()\r\n            .then(snapshot => {\r\n                // console.log('snapshot: ', snapshot);\r\n                const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\r\n                // console.log('collectionsMap: ', collectionsMap);\r\n                dispatch(fetchCollectionsSuccess(collectionsMap)); // toggle isFetching again\r\n            })\r\n            .catch(error => {\r\n                dispatch(fetchCollectionsFailure(error.message))\r\n            });\r\n    };\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}