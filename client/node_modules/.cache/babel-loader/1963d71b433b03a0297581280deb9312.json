{"ast":null,"code":"/* \r\n  firebase import is in order, \r\n  1. first is import firebase from firebase/app\r\n  2. then you can import firestore under firebase\r\n  3. then you can import auth under firebase\r\n  so firebase is the base of firestore and auth.\r\n*/\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_API_KEY,\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_DATA_BASE_URL,\n  projectId: process.env.REACT_APP_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_APP_ID // measurementId: process.env.REACT_APP_MEASUREMENT_ID\n\n}; // const firebaseConfig = {\n//   apiKey: \"AIzaSyCDU1xBiX07iW74fk-Hle9TM7oF2GwXO-E\",\n//   authDomain: \"webdev-c9039.firebaseapp.com\",\n//   databaseURL: \"https://webdev-c9039.firebaseio.com\",\n//   projectId: \"webdev-c9039\",\n//   storageBucket: \"webdev-c9039.appspot.com\",\n//   messagingSenderId: \"1055330796052\",\n//   appId: \"1:1055330796052:web:9ec8b4ca42650286589d01\",\n//   // measurementId: \"G-7SNP0LP9KW\"\n// };\n// userAuth is just the user input in auth.onAuthStateChanged\n\nexport const createUserProfileDocument = async (userAuth, addtionalData) => {\n  if (!userAuth) return; // if user not sign in, exit \n  // console.log('userAuth: ', userAuth);\n\n  const userRef = firestore.doc(`users/${userAuth.uid}`); // console.log('addtionalData: ', addtionalData);\n  // const collectionRef = firestore.collection('users');\n  // console.log('collectionRef: ', collectionRef);\n\n  try {\n    const snapShot = await userRef.get(); // console.log('firestore return: ', snapShot);\n    // const collectionSnapshot = await collectionRef.get();\n    // console.log('querySnapshot: ', collectionSnapshot);\n    // console.log('collection: ', {collection: collectionSnapshot.docs.map(doc => doc.data())});\n\n    if (!snapShot.exists) {\n      // this is the standard to create a node in firestore.\n      const {\n        displayName,\n        email\n      } = userAuth;\n      const createAt = new Date();\n      await userRef.set({\n        displayName,\n        email,\n        createAt,\n        ...addtionalData\n      });\n    }\n  } catch (error) {\n    console.log('firestore error when creating user: ', error.message);\n    alert(error.message);\n  }\n\n  return userRef; // in case we still use the userRef to do other things.\n};\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n  const collectionRef = firestore.collection(collectionKey); // console.log('collectionRef: ', collectionRef);\n\n  const querySnapshot = await collectionRef.get(); // console.log('snapshot Size: ', querySnapshot.size);\n\n  const batch = firestore.batch();\n\n  if (!querySnapshot.size) {\n    // because it's once only operation, store data only when no records on the server\n    objectsToAdd.forEach(obj => {\n      const newDocRef = collectionRef.doc(); // Get a DocumentReference for the document within the collection at the specified path. \n      // If no path is specified, an automatically-generated unique ID will be used for the returned DocumentReference.\n\n      batch.set(newDocRef, obj);\n    });\n  }\n\n  return await batch.commit(); // return a promise\n}; // input is a querySnapshot of firestore collection\n\nexport const convertCollectionsSnapshotToMap = collections => {\n  const transformedCollection = collections.docs.map(doc => {\n    const {\n      title,\n      items\n    } = doc.data();\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      items\n    };\n  });\n  console.log('transformedCollection: ', transformedCollection);\n  transformedCollection.reduce((accumulator, collection) => {\n    accumulator[collection.title.toLowerCase()] = collection;\n    return accumulator;\n  }, {});\n}; // Initialize Firebase\n\nfirebase.initializeApp(firebaseConfig);\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore(); // firestore is db in the document reference\n// google Authentication \n\nconst provider = new firebase.auth.GoogleAuthProvider(); // use google pop-up for sign-in\n\nprovider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\nexport default firebase;","map":{"version":3,"sources":["E:/LearnWebDev/CompleteReactCourse/ecom-cloth-store/src/firebase/firebase.utils.js"],"names":["firebase","firebaseConfig","apiKey","process","env","REACT_APP_API_KEY","authDomain","REACT_APP_AUTH_DOMAIN","databaseURL","REACT_APP_DATA_BASE_URL","projectId","REACT_APP_PROJECT_ID","storageBucket","REACT_APP_STORAGE_BUCKET","messagingSenderId","REACT_APP_MESSAGING_SENDER_ID","appId","REACT_APP_APP_ID","createUserProfileDocument","userAuth","addtionalData","userRef","firestore","doc","uid","snapShot","get","exists","displayName","email","createAt","Date","set","error","console","log","message","alert","addCollectionAndDocuments","collectionKey","objectsToAdd","collectionRef","collection","querySnapshot","batch","size","forEach","obj","newDocRef","commit","convertCollectionsSnapshotToMap","collections","transformedCollection","docs","map","title","items","data","routeName","encodeURI","toLowerCase","id","reduce","accumulator","initializeApp","auth","provider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"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","sourcesContent":["/* \r\n  firebase import is in order, \r\n  1. first is import firebase from firebase/app\r\n  2. then you can import firestore under firebase\r\n  3. then you can import auth under firebase\r\n  so firebase is the base of firestore and auth.\r\n*/\r\nimport firebase from 'firebase/app'; \r\nimport 'firebase/firestore';\r\nimport 'firebase/auth';\r\n\r\nconst firebaseConfig = {\r\n  apiKey: process.env.REACT_APP_API_KEY,\r\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\r\n  databaseURL: process.env.REACT_APP_DATA_BASE_URL,\r\n  projectId: process.env.REACT_APP_PROJECT_ID,\r\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\r\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\r\n  appId: process.env.REACT_APP_APP_ID,\r\n  // measurementId: process.env.REACT_APP_MEASUREMENT_ID\r\n};\r\n\r\n// const firebaseConfig = {\r\n//   apiKey: \"AIzaSyCDU1xBiX07iW74fk-Hle9TM7oF2GwXO-E\",\r\n//   authDomain: \"webdev-c9039.firebaseapp.com\",\r\n//   databaseURL: \"https://webdev-c9039.firebaseio.com\",\r\n//   projectId: \"webdev-c9039\",\r\n//   storageBucket: \"webdev-c9039.appspot.com\",\r\n//   messagingSenderId: \"1055330796052\",\r\n//   appId: \"1:1055330796052:web:9ec8b4ca42650286589d01\",\r\n//   // measurementId: \"G-7SNP0LP9KW\"\r\n// };\r\n\r\n// userAuth is just the user input in auth.onAuthStateChanged\r\nexport const createUserProfileDocument = async (userAuth, addtionalData) => {\r\n  if (!userAuth) return; // if user not sign in, exit \r\n  // console.log('userAuth: ', userAuth);\r\n\r\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\r\n  // console.log('addtionalData: ', addtionalData);\r\n\r\n  // const collectionRef = firestore.collection('users');\r\n  // console.log('collectionRef: ', collectionRef);\r\n\r\n  try {\r\n    const snapShot = await userRef.get();\r\n    // console.log('firestore return: ', snapShot);\r\n\r\n    // const collectionSnapshot = await collectionRef.get();\r\n    // console.log('querySnapshot: ', collectionSnapshot);\r\n    // console.log('collection: ', {collection: collectionSnapshot.docs.map(doc => doc.data())});\r\n\r\n    if (!snapShot.exists) { // this is the standard to create a node in firestore.\r\n      const { displayName, email } = userAuth;\r\n      const createAt = new Date();\r\n      await userRef.set({\r\n        displayName,\r\n        email,\r\n        createAt,\r\n        ...addtionalData\r\n      });\r\n    }\r\n  } catch (error) {\r\n    console.log('firestore error when creating user: ', error.message);\r\n    alert(error.message);\r\n  }\r\n\r\n  return userRef; // in case we still use the userRef to do other things.\r\n}\r\n\r\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\r\n  const collectionRef = firestore.collection(collectionKey);\r\n  // console.log('collectionRef: ', collectionRef);\r\n\r\n  const querySnapshot = await collectionRef.get();\r\n  // console.log('snapshot Size: ', querySnapshot.size);\r\n\r\n  const batch = firestore.batch();\r\n\r\n  if (!querySnapshot.size) { // because it's once only operation, store data only when no records on the server\r\n    objectsToAdd.forEach(obj => {\r\n      const newDocRef = collectionRef.doc();\r\n      // Get a DocumentReference for the document within the collection at the specified path. \r\n      // If no path is specified, an automatically-generated unique ID will be used for the returned DocumentReference.\r\n      batch.set(newDocRef, obj);\r\n    });\r\n\r\n  }\r\n\r\n  return await batch.commit(); // return a promise\r\n}\r\n\r\n// input is a querySnapshot of firestore collection\r\nexport const convertCollectionsSnapshotToMap = (collections) => {\r\n  const transformedCollection = collections.docs.map(doc => {\r\n    const { title, items } = doc.data();\r\n    return {\r\n      routeName: encodeURI(title.toLowerCase()),\r\n      id: doc.id,\r\n      title,\r\n      items\r\n    }\r\n  });\r\n\r\n  console.log('transformedCollection: ', transformedCollection);\r\n  transformedCollection.reduce((accumulator, collection) => {\r\n    accumulator[collection.title.toLowerCase()] = collection;\r\n    return accumulator;\r\n  }, {});\r\n}\r\n\r\n\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport const auth = firebase.auth();\r\nexport const firestore = firebase.firestore();   // firestore is db in the document reference\r\n\r\n// google Authentication \r\nconst provider = new firebase.auth.GoogleAuthProvider();\r\n// use google pop-up for sign-in\r\nprovider.setCustomParameters({ prompt: 'select_account' });\r\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\r\n\r\nexport default firebase;\r\n"]},"metadata":{},"sourceType":"module"}