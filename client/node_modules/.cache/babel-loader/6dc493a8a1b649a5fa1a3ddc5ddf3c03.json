{"ast":null,"code":"import { takeLatest, put, all, call } from 'redux-saga/effects';\nimport UserActionTypes from './user.types'; // import { signInWithGoogle } from '../../firebase/firebase.utils'\n\nimport { googleProvider, auth, createUserProfileDocument, getCurrentUser } from '../../firebase/firebase.utils';\nimport { signInSuccess, signInFailure } from './user.action';\nexport function* getSnapshotFromUserAuth(userAuth) {\n  try {\n    // console.log('user', userAuth);\n    const userRef = yield call(createUserProfileDocument, userAuth);\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n    console.log('user: ', {\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    });\n  } catch (error) {\n    // console.error(error);\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWithGoogle() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    // console.error(error);\n    yield put(signInFailure(error));\n  }\n}\n; // what we want to do: listen to GOOGLE_SIGN_IN_START and trigger our actual sign from the saga.\n\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\n; // here input is an action object\n\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    console.log('error: ', error.message);\n    yield put(signInFailure(error));\n  }\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\nexport function* isUserAuthenticated() {\n  // console.log('isUserAuthenticated() called');\n  try {\n    const userAuth = yield getCurrentUser();\n    console.log('userAuth: ', userAuth);\n    if (!userAuth) return;else yield getSnapshotFromUserAuth(userAuth);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* onCheckUserSession() {\n  yield console.log('saga: onCheckUserSession() called');\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(onCheckUserSession)]);\n}\n;","map":{"version":3,"sources":["E:/LearnWebDev/CompleteReactCourse/ecom-cloth-store/src/redux/user/user.sagas.js"],"names":["takeLatest","put","all","call","UserActionTypes","googleProvider","auth","createUserProfileDocument","getCurrentUser","signInSuccess","signInFailure","getSnapshotFromUserAuth","userAuth","userRef","userSnapshot","get","id","data","console","log","error","signInWithGoogle","user","signInWithPopup","onGoogleSignInStart","GOOGLE_SIGN_IN_START","signInWithEmail","payload","email","password","signInWithEmailAndPassword","message","onEmailSignInStart","EMAIL_SIGN_IN_START","isUserAuthenticated","onCheckUserSession","CHECK_USER_SESSION","userSagas"],"mappings":"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","sourcesContent":["import { takeLatest, put, all, call } from 'redux-saga/effects';\r\n\r\nimport UserActionTypes from './user.types';\r\n// import { signInWithGoogle } from '../../firebase/firebase.utils'\r\nimport {\r\n    googleProvider,\r\n    auth,\r\n    createUserProfileDocument,\r\n    getCurrentUser\r\n} from '../../firebase/firebase.utils'\r\n\r\nimport {\r\n    signInSuccess,\r\n    signInFailure\r\n} from './user.action';\r\n\r\nexport function* getSnapshotFromUserAuth(userAuth) {\r\n    try {\r\n        // console.log('user', userAuth);\r\n        const userRef = yield call(createUserProfileDocument, userAuth);\r\n        const userSnapshot = yield userRef.get();\r\n        yield put(signInSuccess({\r\n            id: userSnapshot.id,\r\n            ...userSnapshot.data()\r\n        }));\r\n\r\n        console.log('user: ', {\r\n            id: userSnapshot.id, \r\n            ...userSnapshot.data()\r\n         });\r\n\r\n    } catch (error) {\r\n        // console.error(error);\r\n        yield put(signInFailure(error));\r\n    }\r\n}\r\n\r\nexport function* signInWithGoogle() {\r\n    try {\r\n        const { user } = yield auth.signInWithPopup(googleProvider);\r\n        yield getSnapshotFromUserAuth(user);\r\n    } catch (error) {\r\n        // console.error(error);\r\n        yield put(signInFailure(error));\r\n    }\r\n};\r\n\r\n// what we want to do: listen to GOOGLE_SIGN_IN_START and trigger our actual sign from the saga.\r\nexport function* onGoogleSignInStart() {\r\n    yield takeLatest(\r\n        UserActionTypes.GOOGLE_SIGN_IN_START,\r\n        signInWithGoogle\r\n    );\r\n};\r\n\r\n// here input is an action object\r\nexport function* signInWithEmail({ payload: { email, password } }) {\r\n    try {\r\n        const { user } = yield auth.signInWithEmailAndPassword(email, password);\r\n        yield getSnapshotFromUserAuth(user);\r\n    } catch (error) {\r\n        console.log('error: ', error.message);\r\n        yield put(signInFailure(error));\r\n    }\r\n}\r\n\r\nexport function* onEmailSignInStart() {\r\n    yield takeLatest(\r\n        UserActionTypes.EMAIL_SIGN_IN_START,\r\n        signInWithEmail\r\n    )\r\n}\r\n\r\n\r\nexport function* isUserAuthenticated() {\r\n    // console.log('isUserAuthenticated() called');\r\n    try {\r\n        const userAuth = yield getCurrentUser();\r\n        console.log('userAuth: ', userAuth);\r\n        if(!userAuth) return; \r\n        else yield getSnapshotFromUserAuth(userAuth);\r\n\r\n    } catch (error) {\r\n        yield put(signInFailure(error));\r\n    }\r\n}\r\n\r\nexport function* onCheckUserSession() {\r\n    yield console.log('saga: onCheckUserSession() called');\r\n    yield takeLatest(\r\n        UserActionTypes.CHECK_USER_SESSION,\r\n        isUserAuthenticated\r\n    )\r\n}\r\n\r\nexport function* userSagas() {\r\n    yield all([\r\n        call(onGoogleSignInStart),\r\n        call(onEmailSignInStart),\r\n        call(onCheckUserSession)\r\n    ]);\r\n};"]},"metadata":{},"sourceType":"module"}